import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Statistic, Progress, Table, Tabs, Typography, Tag } from 'antd';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { UserOutlined, ClockCircleOutlined, CalendarOutlined } from '@ant-design/icons';

const { Title, Text } = Typography;
const { TabPane } = Tabs;

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

const UserRetention = ({ dateRange, fullWidth = false }) => {
    const [loading, setLoading] = useState(false);
    const [data, setData] = useState({
        firstRetrospectiveRetention: [],
        periodicRetrospectiveUsers: [],
        retentionByPeriod: [],
        userRetentionData: []
    });

    useEffect(() => {
        fetchRetentionData();
    }, [dateRange]);

    const fetchRetentionData = async () => {
        setLoading(true);
        try {
            // Ïã§Ï†ú API Ìò∏Ï∂úÎ°ú ÎåÄÏ≤¥ ÏòàÏ†ï
            const mockData = {
                firstRetrospectiveRetention: [
                    { period: '1Ïùº', retention: 85.2 },
                    { period: '3Ïùº', retention: 72.1 },
                    { period: '7Ïùº', retention: 58.3 },
                    { period: '14Ïùº', retention: 45.7 },
                    { period: '30Ïùº', retention: 32.4 },
                    { period: '60Ïùº', retention: 28.1 },
                    { period: '90Ïùº', retention: 25.3 }
                ],
                periodicRetrospectiveUsers: [
                    { frequency: 'Îß§Ïùº', users: 1250, percentage: 15.2 },
                    { frequency: 'Ï£º 2-3Ìöå', users: 2100, percentage: 25.5 },
                    { frequency: 'Ï£º 1Ìöå', users: 3200, percentage: 38.8 },
                    { frequency: 'Ïõî 2-3Ìöå', users: 1200, percentage: 14.6 },
                    { frequency: 'Ïõî 1Ìöå', users: 480, percentage: 5.8 }
                ],
                retentionByPeriod: [
                    { period: '1Ï£º', retention: 78.5 },
                    { period: '2Ï£º', retention: 65.2 },
                    { period: '1Í∞úÏõî', retention: 52.1 },
                    { period: '2Í∞úÏõî', retention: 41.3 },
                    { period: '3Í∞úÏõî', retention: 35.7 },
                    { period: '6Í∞úÏõî', retention: 28.9 }
                ],
                userRetentionData: [
                    { cohort: '2024-01', '1Ï£º': 85, '2Ï£º': 72, '1Í∞úÏõî': 58, '2Í∞úÏõî': 45, '3Í∞úÏõî': 38 },
                    { cohort: '2024-02', '1Ï£º': 82, '2Ï£º': 68, '1Í∞úÏõî': 55, '2Í∞úÏõî': 42, '3Í∞úÏõî': 35 },
                    { cohort: '2024-03', '1Ï£º': 88, '2Ï£º': 75, '1Í∞úÏõî': 61, '2Í∞úÏõî': 48, '3Í∞úÏõî': 40 },
                    { cohort: '2024-04', '1Ï£º': 80, '2Ï£º': 65, '1Í∞úÏõî': 52, '2Í∞úÏõî': 39, '3Í∞úÏõî': 32 },
                    { cohort: '2024-05', '1Ï£º': 86, '2Ï£º': 73, '1Í∞úÏõî': 59, '2Í∞úÏõî': 46, '3Í∞úÏõî': 39 }
                ]
            };

            setData(mockData);
        } catch (error) {
            console.error('Î¶¨ÌÖêÏÖò Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
        } finally {
            setLoading(false);
        }
    };

    const columns = [
        {
            title: 'Ï£ºÍ∏∞',
            dataIndex: 'frequency',
            key: 'frequency',
        },
        {
            title: 'ÏÇ¨Ïö©Ïûê Ïàò',
            dataIndex: 'users',
            key: 'users',
            sorter: (a, b) => a.users - b.users,
        },
        {
            title: 'ÎπÑÏú®',
            dataIndex: 'percentage',
            key: 'percentage',
            render: (percentage) => `${percentage}%`,
            sorter: (a, b) => a.percentage - b.percentage,
        }
    ];

    const renderOverview = () => (
        <Row gutter={[16, 16]}>
            <Col xs={24} md={12}>
                <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] Ïã†Í∑ú ÏÇ¨Ïö©Ïûê Ï≤´ ÌöåÍ≥† ÌõÑ Î¶¨ÌÖêÏÖò" loading={loading}>
                    <ResponsiveContainer width="100%" height={200}>
                        <LineChart data={data.firstRetrospectiveRetention}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="period" />
                            <YAxis />
                            <Tooltip formatter={(value) => `${value}%`} />
                            <Line type="monotone" dataKey="retention" stroke="#1890ff" strokeWidth={2} />
                        </LineChart>
                    </ResponsiveContainer>
                </Card>
            </Col>

            <Col xs={24} md={12}>
                <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] Ï£ºÍ∏∞Ï†Å ÌöåÍ≥† ÏûëÏÑ± ÏÇ¨Ïö©Ïûê Î∂ÑÌè¨" loading={loading}>
                    <ResponsiveContainer width="100%" height={200}>
                        <PieChart>
                            <Pie
                                data={data.periodicRetrospectiveUsers}
                                cx="50%"
                                cy="50%"
                                labelLine={false}
                                label={({ frequency, percentage }) => `${frequency} ${percentage}%`}
                                outerRadius={80}
                                fill="#8884d8"
                                dataKey="users"
                            >
                                {data.periodicRetrospectiveUsers.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                ))}
                            </Pie>
                            <Tooltip />
                        </PieChart>
                    </ResponsiveContainer>
                </Card>
            </Col>
        </Row>
    );

    const renderDetailedAnalysis = () => (
        <Row gutter={[16, 16]}>
            <Col xs={24} lg={12}>
                <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] Ï£ºÍ∏∞Î≥Ñ ÌöåÍ≥† ÏûëÏÑ± ÏÇ¨Ïö©Ïûê" loading={loading}>
                    <Table
                        columns={columns}
                        dataSource={data.periodicRetrospectiveUsers}
                        pagination={false}
                        size="small"
                    />
                </Card>
            </Col>

            <Col xs={24} lg={12}>
                <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] Í∏∞Í∞ÑÎ≥Ñ Î¶¨ÌÖêÏÖò Ï∂îÏù¥" loading={loading}>
                    <ResponsiveContainer width="100%" height={200}>
                        <BarChart data={data.retentionByPeriod}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="period" />
                            <YAxis />
                            <Tooltip formatter={(value) => `${value}%`} />
                            <Bar dataKey="retention" fill="#52c41a" />
                        </BarChart>
                    </ResponsiveContainer>
                </Card>
            </Col>

            <Col xs={24}>
                <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] ÏΩîÌò∏Ìä∏Î≥Ñ Î¶¨ÌÖêÏÖò Î∂ÑÏÑù" loading={loading}>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={data.userRetentionData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="cohort" />
                            <YAxis />
                            <Tooltip formatter={(value) => `${value}%`} />
                            <Legend />
                            <Bar dataKey="1Ï£º" fill="#1890ff" />
                            <Bar dataKey="2Ï£º" fill="#52c41a" />
                            <Bar dataKey="1Í∞úÏõî" fill="#faad14" />
                            <Bar dataKey="2Í∞úÏõî" fill="#f5222d" />
                            <Bar dataKey="3Í∞úÏõî" fill="#722ed1" />
                        </BarChart>
                    </ResponsiveContainer>
                </Card>
            </Col>
        </Row>
    );

    if (fullWidth) {
        return (
            <div>
                <Title level={3}>Î¶¨ÌÖêÏÖò Î∂ÑÏÑù</Title>
                <Tabs defaultActiveKey="overview">
                    <TabPane tab="Í∞úÏöî" key="overview">
                        {renderOverview()}
                    </TabPane>
                    <TabPane tab="ÏÉÅÏÑ∏ Î∂ÑÏÑù" key="detailed">
                        {renderDetailedAnalysis()}
                    </TabPane>
                </Tabs>
            </div>
        );
    }

    return (
        <Card title="[üö® ÎØ∏Íµ¨ÌòÑ] Î¶¨ÌÖêÏÖò Î∂ÑÏÑù" loading={loading}>
            <ResponsiveContainer width="100%" height={200}>
                <LineChart data={data.firstRetrospectiveRetention}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="period" />
                    <YAxis />
                    <Tooltip formatter={(value) => `${value}%`} />
                    <Line type="monotone" dataKey="retention" stroke="#1890ff" strokeWidth={2} />
                </LineChart>
            </ResponsiveContainer>
        </Card>
    );
};

export default UserRetention;
